{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\denis\\\\OneDrive - Sofia University\\\\Desktop\\\\instant-messages-search\\\\instant-messages-search\\\\client\\\\src\\\\components\\\\RefMessagesManager.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from \"react\";\nimport { createContext, useContext, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefManagerContext = /*#__PURE__*/createContext(null);\nexport const RefManager = ({\n  children\n}) => {\n  _s();\n  const panelsRefs = useRef({});\n  const registerPanel = (panelId, targets) => {\n    panelsRefs.current[panelId] = targets;\n  };\n  const unregisterPanel = panelId => {\n    delete panelsRefs.current[panelId];\n  };\n  const getTarget = (panelId, targetId) => {\n    const panel = panelsRefs.current[panelId];\n    if (panel && panel.targetsRef.current && panel.targetsRef.current[targetId]) {\n      return panel.targetsRef.current[targetId];\n    }\n  };\n  const getTargets = panelId => {\n    return panelsRefs.current[panelId].targetsRef.current;\n  };\n  return /*#__PURE__*/_jsxDEV(RefManagerContext.Provider, {\n    value: {\n      registerPanel,\n      unregisterPanel,\n      getTarget,\n      getTargets\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(RefManager, \"SKST/kR5Hexm5g+MqrwQBekiL+w=\");\n_c = RefManager;\nexport const useRefManager = () => {\n  _s2();\n  const context = useContext(RefManagerContext);\n  if (!context) {\n    throw new Error(\"No context in RefManager.\");\n  }\n  return context;\n};\n_s2(useRefManager, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"RefManager\");","map":{"version":3,"names":["React","createContext","useContext","useRef","jsxDEV","_jsxDEV","RefManagerContext","RefManager","children","_s","panelsRefs","registerPanel","panelId","targets","current","unregisterPanel","getTarget","targetId","panel","targetsRef","getTargets","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useRefManager","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/denis/OneDrive - Sofia University/Desktop/instant-messages-search/instant-messages-search/client/src/components/RefMessagesManager.tsx"],"sourcesContent":["import React from \"react\"\r\nimport { createContext, ReactNode, useContext, useRef } from \"react\";\r\n\r\ntype TargetsType = {\r\n    targetsRef: React.RefObject<Record<number, HTMLElement>>;\r\n}\r\n\r\ntype RefManagerContextType = {\r\n    registerPanel: (panelId: string,  panel: TargetsType) => void;\r\n    unregisterPanel: (panelId: string) => void;\r\n    getTarget: (panelId: string, targetId: number) => HTMLElement | undefined;\r\n    getTargets: (panelId: string) => Record<number, HTMLElement>;\r\n  };\r\n\r\nconst RefManagerContext = createContext<RefManagerContextType | null>(null);\r\n\r\nexport const RefManager = ({ children }: { children: ReactNode } ) => {\r\n    const panelsRefs = useRef<Record<string, TargetsType>>({})\r\n\r\n    const registerPanel = (panelId: string, targets: TargetsType) => {\r\n        panelsRefs.current[panelId] = targets\r\n    }\r\n\r\n    const unregisterPanel = (panelId: string) => {\r\n        delete panelsRefs.current[panelId]\r\n    }\r\n\r\n    const getTarget = (panelId: string, targetId: number) => {\r\n        const panel = panelsRefs.current[panelId];\r\n        if (panel && panel.targetsRef.current && panel.targetsRef.current[targetId]) {\r\n            return panel.targetsRef.current[targetId];\r\n        }\r\n    }\r\n\r\n    const getTargets = (panelId: string) => {\r\n        return panelsRefs.current[panelId].targetsRef.current;\r\n    }\r\n\r\n    return (\r\n        <RefManagerContext.Provider value = {{ registerPanel, unregisterPanel, getTarget, getTargets }}>\r\n            {children}\r\n        </RefManagerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useRefManager = () => {\r\n    const context = useContext(RefManagerContext)\r\n    if(!context) {\r\n        throw new Error(\"No context in RefManager.\")\r\n    }\r\n\r\n    return context\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAaC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAarE,MAAMC,iBAAiB,gBAAGL,aAAa,CAA+B,IAAI,CAAC;AAE3E,OAAO,MAAMM,UAAU,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAM;EAAAC,EAAA;EAClE,MAAMC,UAAU,GAAGP,MAAM,CAA8B,CAAC,CAAC,CAAC;EAE1D,MAAMQ,aAAa,GAAGA,CAACC,OAAe,EAAEC,OAAoB,KAAK;IAC7DH,UAAU,CAACI,OAAO,CAACF,OAAO,CAAC,GAAGC,OAAO;EACzC,CAAC;EAED,MAAME,eAAe,GAAIH,OAAe,IAAK;IACzC,OAAOF,UAAU,CAACI,OAAO,CAACF,OAAO,CAAC;EACtC,CAAC;EAED,MAAMI,SAAS,GAAGA,CAACJ,OAAe,EAAEK,QAAgB,KAAK;IACrD,MAAMC,KAAK,GAAGR,UAAU,CAACI,OAAO,CAACF,OAAO,CAAC;IACzC,IAAIM,KAAK,IAAIA,KAAK,CAACC,UAAU,CAACL,OAAO,IAAII,KAAK,CAACC,UAAU,CAACL,OAAO,CAACG,QAAQ,CAAC,EAAE;MACzE,OAAOC,KAAK,CAACC,UAAU,CAACL,OAAO,CAACG,QAAQ,CAAC;IAC7C;EACJ,CAAC;EAED,MAAMG,UAAU,GAAIR,OAAe,IAAK;IACpC,OAAOF,UAAU,CAACI,OAAO,CAACF,OAAO,CAAC,CAACO,UAAU,CAACL,OAAO;EACzD,CAAC;EAED,oBACIT,OAAA,CAACC,iBAAiB,CAACe,QAAQ;IAACC,KAAK,EAAI;MAAEX,aAAa;MAAEI,eAAe;MAAEC,SAAS;MAAEI;IAAW,CAAE;IAAAZ,QAAA,EAC1FA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAErC,CAAC;AAAAjB,EAAA,CA3BYF,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AA6BvB,OAAO,MAAMqB,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAG5B,UAAU,CAACI,iBAAiB,CAAC;EAC7C,IAAG,CAACwB,OAAO,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;EAChD;EAEA,OAAOD,OAAO;AAClB,CAAC;AAAAD,GAAA,CAPYD,aAAa;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}